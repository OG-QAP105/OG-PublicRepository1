"""
Сортировка слиянием основана на принципе «разделяй и властвуй». Без шуток. Сначала делим массив пополам
(или почти пополам, если в массиве нечетное количество элементов). И снова пополам. И снова. Еще раз. Пока не устанете.
Ладно, на самом деле программа сама это сделает, если использовать рекурсию.
А выход из рекурсии случится тогда, когда отделенный кусок массива станет размером 1, т. е. сократится до одного элемента.
А один элемент уж точно можно считать отсортированным относительно себя. Полпути сортировки можно считать пройденной.
Дальше — интереснее.
Нам нужно склеивать обратно расщеплённые части массива, потому она и называется сортировкой слиянием. Итак, имеем два одиночных элемента — сравниваем их и возвращаем на предыдущий уровень рекурсии в нужном порядке.

Когда есть больше элементов в каждой из частей, подлежащих слиянию, нужно быть предельно аккуратным:

1. Сравниваем первые элементы.
2. В результирующий массив записываем наименьший.
3. Сравниваем первый элемент в нетронутом и второй элемент — из другой части.
4. Сравниваем — склеиваем в результат.
5. И так продолжается, пока не будет достигнут конец одной из частей.
6. Последний штрих — в результирующий массив записать все элементы из ещё пока не пустой части.
7. Вернуть результат на предыдущий уровень рекурсии.
"""

L = [2, 3, 1, 4, 6, 5, 9, 8, 7]


def merge_sort(L):  # "разделяй"
    if len(L) < 2:  # если кусок массива равен 2,
        return L[:]  # выходим из рекурсии
    else:
        middle = len(L) // 2  # ищем середину
        left = merge_sort(L[:middle])  # рекурсивно делим левую часть
        right = merge_sort(L[middle:])  # и правую
        return merge(left, right)  # выполняем слияние


def merge(left, right):  # "властвуй"
    result = []  # результирующий массив
    i, j = 0, 0  # указатели на элементы

    # пока указатели не вышли за границы
    while i < len(left) and j < len(right):
        if left[i] < right[j]:
            result.append(left[i])
            i += 1
        else:
            result.append(right[j])
            j += 1

    # добавляем хвосты
    while i < len(left):
        result.append(left[i])
        i += 1

    while j < len(right):
        result.append(right[j])
        j += 1

    return result


print(merge_sort(L))
