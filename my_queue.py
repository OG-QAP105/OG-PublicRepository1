"""
Очередь может быть реализована как на массивах, так и на списках. В связи с наличием динамического массива
в Python (list) попробуем построить очередь, используя эту структуру данных.
Она имеет своё ограничение из-за того, что удаление из конца или вставка элемента в начало имеют сложность O(n).

Чтобы обойти это ограничение, зафиксируем несколько свойств очереди:

Определим максимальную длину очереди — N_max.
При переполнении будем запрещать добавление элементов в очередь.
Зафиксируем два указателя:  head (начало) и tail (хвост) очереди.
Закольцуем очередь таким образом, что если указатель tail >= n_max, то мы перемещаем его в начало.
"""
"""
Для очереди можно определить несколько операций:

Вставка элемента в хвост очереди (push).
Получение элемента из начала очереди (top).
Удаление элемента из начала очереди (pop).
Проверка наличия элементов в очереди (is_empty).
Получение размера очереди (size).
Все они выполняются за O(1). И это то, что нужно!

Попробуем создать обработчик задач на бесконечном цикле с использованием очереди:
"""

N_max = int(input("Определите размер очереди:"))

queue = [0 for _ in range(N_max)]  # инициализируем список с нулевыми элементами
order = 0  # будем хранить сквозной номер задачи
head = 0  # указатель на начало очереди
tail = 0  # указатель на элемент следующий за концом очереди

# Задание 22.4.6
#
# Напишите функцию is_empty, которая проверяет наличие элементов в очереди, используя указатели head и tail.
# Запрещается использование функции len(list_), так как её сложность O(n).
def is_empty(): # очередь пуста?
    # да, если указатели совпадают и в них содержится ноль
    return head == tail and queue[head] == 0


# Задание 22.4.7
# Задание на самопроверку.
#
# Напишите функцию size, которая возвращает текущий размер очереди.
# Учтите, что необходимо рассмотреть несколько случаев: когда очередь пустая, когда очередь полная
# (какому условию соответствует?), а также отдельное внимание стоит обратить на тот случай, когда хвост
# очереди переместился в начало списка (закольцевался).
def size(): # получаем размер очереди
    if is_empty(): # если она пуста
        return 0 # возвращаем ноль
    elif head == tail: # иначе, если очередь не пуста, но указатели совпадают
        return N_max # значит очередь заполнена
    elif head > tail: # если хвост очереди сместился в начало списка
        return N_max - head + tail
    else: # или если хвост стоит правее начала
        return tail - head

# Задание 22.4.8
#
# Напишите функцию add, которая добавляет задачу в конец очереди. Также учтите, что размер массива ограничен,
# и при достижении этого предела необходимо перенести указатель в положение 0.
# Также обратите внимание на области видимости переменных tail и order.
# После добавления задачи в очередь, она должна вывести уведомление об этом в формате:
#
# "Задача №1 добавлена"
def add():  # добавляем задачу в очередь
    global tail, order
    order += 1  # увеличиваем порядковый номер задачи
    queue[tail] = order  # добавляем его в очередь
    print("Задача №%d добавлена" % (queue[tail]))

    # увеличиваем указатель на 1 по модулю максимального числа элементов
    # для зацикливания очереди в списке
    tail = (tail + 1) % N_max

# Задание 22.4.9
#
# Напишите функцию, печатающую информацию о приоритетной задаче в формате:
#
# "Задача №1 в приоритете"
def show(): # выводим приоритетную задачу
    print("Задача №%d в приоритете" % (queue[head]))

# Задание 22.4.10
#
# Напишите функцию, которая печатает в консоль задачу (=выполняет её) и, соответственно, удаляет её из очереди, присваивая ей значение 0. Формат вывода:
#
# "Задача №1 выполнена"
def do(): # выполняем приоритетную задачу
    global head
    print("Задача №%d выполнена" % (queue[head]))
    queue[head] = 0 # после выполнения зануляем элемент по указателю
    head = (head + 1) % N_max # и циклично перемещаем указатель


while True:
    cmd = input("Введите команду:")
    if cmd == "empty":
        if is_empty():
            print("Очередь пустая")
        else:
            print("В очереди есть задачи")
    elif cmd == "size":
        print("Количество задач в очереди:", size())
    elif cmd == "add":
        if size() != N_max:
            add()
        else:
            print("Очередь переполнена")
    elif cmd == "show":
        if is_empty():
            print("Очередь пустая")
        else:
            show()
    elif cmd == "do":
        if is_empty():
            print("Очередь пустая")
        else:
            do()
    elif cmd == "exit":
        for _ in range(size()):
            do()
        print("Очередь пустая. Завершение работы")
        break
    else:
        print("Введена неверная команда")


